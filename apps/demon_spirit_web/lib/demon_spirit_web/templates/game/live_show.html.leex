<% game = @state.game %>

<% top_cards   = if @flip_per, do: game.cards.white, else: game.cards.black %>
<% top_player  = if @flip_per, do: @state.white, else: @state.black %>
<% bottom_cards   = if @flip_per, do: game.cards.black, else: game.cards.white %>
<% bottom_player  = if @flip_per, do: @state.black, else: @state.white %>
<% bottom_next = game.winner == nil and if @flip_per, do: game.turn == :black, else: game.turn == :white %>
<% top_next = game.winner == nil and if @flip_per, do: game.turn == :white, else: game.turn == :black %>

<style>

.flex-column-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.flex-grow {
  flex-grow: 1;
}

.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 10px;
}

.box {
  background-color: #fff;
  color: #444;
  border-radius: 5px;
  padding: 10px;
  font-size: 100%;
}

/* Force Square */
.box-force-square::before {
  content: "";
  padding-bottom: 100%;
  display: inline-block;
  vertical-align: top;
}

.box-header {
  grid-column: 1 / 4;
}
.box-a {
  grid-column: 1 / 3;
}
.box-b {
  grid-column: 3 / 4;
}
.box-footer {
  grid-column: 1 / 4;
}
.pos-rel {
  position: relative;
}
.chessboard {
  width: 100%;
  height: 100%;
  background: url(/images/bg-blue3.svg);
  position: absolute;
  top: 0;
  left: 0;
}

.square {
  width: 20%;
  height: 20%;
}
.move_dest {
  background-image: radial-gradient(at center center, rgba(20, 85, 30, 0.5) 19%, rgba(0, 0, 0, 0) 20%);
  z-index: 110;
}
.move_dest.also_piece {
  background-image: radial-gradient(at center center, rgba(20, 85, 30, 1.0) 19%, rgba(0, 0, 0, 0) 20%);
  z-index: 11000;
}
.move_dest:hover {
  background-color: rgba(20, 85, 30, 0.5);
  background-image: none;
}
.selected {
  background-color: green;
  opacity: 0.3;
}
.last_move {
  background-color: rgba(179, 0, 0, 0.5);
}
.piece {
  width: 20%;
  height: 20%;
  z-index: 100;
}
.piece.white.pawn {
  background: url(/images/white_pawn.svg);
  background-repeat: no-repeat;
  background-size: contain;
}
.piece.black.pawn {
  background: url(/images/black_pawn.svg);
  background-repeat: no-repeat;
  background-size: contain;
}
.piece.white.king {
  background: url(/images/white_king.svg);
  background-repeat: no-repeat;
  background-size: contain;
}
.piece.black.king {
  background: url(/images/black_king.svg);
  background-repeat: no-repeat;
  background-size: contain;
}

/* Cards */

table.table_card {
  border-collapse: collapse;
  margin-bottom: 0px;
}
td.card_cell {
  border: 1px solid black;
  padding: 0px;
  width: 20%;
  transition: all 0.5s ease-in-out;
}

td:after {
  content: '';
  display: block;
  margin-top: 100%;
}

td .content {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
} 

.winner_overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  z-index: 2000;
  color: white;
  font-size: 48px;
}
</style>

<div class="flex flex-wrap">
  <div class="w-full p-4 text-center text-gray-800">
    <%# Main %>

    <div class="flex items-center justify-center">

      <%# Main - Board %>
      <div class=" w-64  md:w-96  xl:w-128 relative">

        <div class="w-full h-auto flex items-center justify-center mb-4">
          <%# Top Bar  %>
          <%= for card <- top_cards do %>
            <%= render "show/card.html", card: card, flip: true %>
          <% end %>
        </div>

        <div class="h-64 w-64 md:h-96 md:w-96 xl:h-128 xl:w-128 relative">
          <%= render "show/board.html", state: @state, flip_per: @flip_per %>
        </div>

        <div class="w-full h-auto flex items-center justify-center mt-4">
          <%# Top Bar  %>
          <%= for card <- bottom_cards do %>
            <%= render "show/card.html", card: card, flip: false %>
          <% end %>
        </div>

      </div>

      <%# Main - Side %>
      <div class="h-64 md:h-96 xl:h-128 flex flex-col justify-between ml-4">
          <div>
            <%= if top_next do %>
              <div class="bg-blue-200 text-blue-600 font-semibold rounded">
                Next Move<br />
              </div>
            <% end %>
            <%= render "show/player.html", player: top_player %>
          </div>

          <div>
            <%= render "show/card.html",
                card: game.cards.side,
                flip: (game.turn == :black and not @flip_per) || (@flip_per and game.turn == :white) 
            %>
            <%= if game.winner == nil do %>
              <p style="margin-top: 10px; font-size: 24px">
                <%= game.turn %>'s turn
              </p>
            <% end %>
          </div>

          <div>
            <%= if bottom_next do %>
              <div class="bg-blue-200 text-blue-600 font-semibold rounded">
                Next Move<br />
              </div>
            <% end %>
            <%= render "show/player.html", player: bottom_player %>
          </div>

      </div>
    </div>

  </div>
</div>
