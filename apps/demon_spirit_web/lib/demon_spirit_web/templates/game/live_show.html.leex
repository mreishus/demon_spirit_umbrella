<style>

* {
  abox-sizing: border-box;
}
.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 10px;
}

.box {
  background-color: #fff;
  color: #444;
  border-radius: 5px;
  padding: 10px;
  font-size: 100%;
}

/* Force Square */
.box-force-square::before {
  content: "";
  padding-bottom: 100%;
  display: inline-block;
  vertical-align: top;
}

.box-header {
  grid-column: 1 / 4;
}
.box-a {
  grid-column: 1 / 3;
}
.box-b {
  grid-column: 3 / 4;
}
.box-footer {
  grid-column: 1 / 4;
}
.pos-rel {
  position: relative;
}
.chessboard {
  width: 100%;
  height: 100%;
  background: url(/images/bg-blue3.svg);
  position: absolute;
  top: 0;
  left: 0;
}

.square {
  width: 20%;
  height: 20%;
}
.move_dest {
  background-image: radial-gradient(at center center, rgba(20, 85, 30, 0.5) 19%, rgba(0, 0, 0, 0) 20%);
  z-index: 110;
}
.move_dest.also_piece {
  background-image: radial-gradient(at center center, rgba(20, 85, 30, 1.0) 19%, rgba(0, 0, 0, 0) 20%);
  z-index: 11000;
}
.move_dest:hover {
  background-color: rgba(20, 85, 30, 0.5);
  background-image: none;
}
.selected {
  background-color: green;
  opacity: 0.3;
}
.last_move {
  background-color: rgba(179, 0, 0, 0.5);
}
.piece {
  width: 20%;
  height: 20%;
  z-index: 100;
}
.piece.white.pawn {
  background: url(/images/white_pawn.svg);
  background-repeat: no-repeat;
  background-size: contain;
}
.piece.black.pawn {
  background: url(/images/black_pawn.svg);
  background-repeat: no-repeat;
  background-size: contain;
}
.piece.white.king {
  background: url(/images/white_king.svg);
  background-repeat: no-repeat;
  background-size: contain;
}
.piece.black.king {
  background: url(/images/black_king.svg);
  background-repeat: no-repeat;
  background-size: contain;
}

/* Cards */
.card {
  background-color: #EEE;
  padding: 5px;
  display: inline-block;
  width: 90px;
  border-radius: 5px;
}
.card.flip {
  transform: rotate(180deg);
}
table.table_card {
  border-collapse: collapse;
  margin-bottom: 0px;
}
td.card_cell {
  border: 1px solid black;
  padding: 0px;
  width: 20%;
}
td.card_cell.center {
  background-color: #333;
}
td.card_cell.move {
  background-color: green;
}

td:after {
  content: '';
  display: block;
  margin-top: 100%;
}

td .content {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
} 
</style>

<div class="grid">
  <div class="box box-header">
    <%= for card <- @game.cards.black do %>
      <%= render "card.html", card: card, flip: true %>
    <% end %>
  </div>
  <div class="box box-force-square box-a" style="position: relative;">
    <div class="chessboard">
      <%# Render Pieces %>
      <%= for {{x, y}, piece} <- @game.board do %>
        <div 
          phx-click="click-square-<%= x %>-<%= y %>"
        draggable='true' phx-hook="Draggable"
        class="piece <%= piece.type %> <%= piece.color %>" style="
        position: absolute;
        transform: translate( <%= x * 100 %>%, <%= (4 - y) * 100 %>%);
        "><!--
          <%= piece.color %> <%= piece.type %> at <%= x %>, <%= y %>
        --></div>
      <% end %>

      <%# Render Square Targets %>
      <%= for x <- [0, 1, 2, 3, 4] do %>
        <%= for y <- [0, 1, 2, 3, 4] do %>
          <div
            phx-click="click-square-<%= x %>-<%= y %>"
            class="square
            <%= if {x, y} == @state.selected do %>
              selected
            <% end %>
            <%= if {x, y} in @state.move_dest do %>
              move_dest
            <% end %>
            <%= if @state.game.board |> Map.has_key?({x,y}) do %>
              also_piece
            <% end %>
            <%= if @state.last_move != nil and (@state.last_move.from == {x, y} or @state.last_move.to == {x, y}) do %>
              last_move
            <% end %>
            " style="
          position: absolute;
          transform: translate( <%= x * 100 %>%, <%= (4 - y) * 100 %>%);
          "><!--
          Blank Square
          --></div>
        <% end %>
      <% end %>
    </div>
  </div>
  <div class="box box-b">
    <%= render "card.html", card: @game.cards.side, flip: false %>
  </div>
  <div class="box box-footer">
    <%= for card <- @game.cards.white do %>
      <%= render "card.html", card: card, flip: false %>
    <% end %>
  </div>
</div>


<pre>
  <%#= inspect(@game, pretty: true) %>
</pre>
<pre>
  <%= inspect(@state, pretty: true) %>
</pre>

PHX Hook Example
<br />Type 10 numbers
<input type="text" name="user[phone_number]" phx-hook="PhoneNumber"/>

